// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель пользователя
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String?
  avatar    String?
  role      Role      @default(USER)
  notes     Note[]
  folders   Folder[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

// Модель заметки
model Note {
  id        String    @id @default(cuid())
  title     String
  content   Json?
  folderId  String?
  folder    Folder?   @relation(fields: [folderId], references: [id], onDelete: SetNull)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags      Tag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("notes")
}

// Модель папки
model Folder {
  id        String    @id @default(cuid())
  name      String
  parentId  String?
  parent    Folder?   @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children  Folder[]  @relation("FolderHierarchy")
  notes     Note[]
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("folders")
}

// Модель тега
model Tag {
  id        String    @id @default(cuid())
  name      String
  color     String?
  notes     Note[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("tags")
}

enum Role {
  USER
  ADMIN
}

// Модель страницы
model Page {
  id        String   @id @default(uuid())
  title     String
  content   Json?    // Rich text content в JSON формате
  isPublic  Boolean  @default(false)
  parentId  String?  // Для иерархической структуры
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ownerId   String
  
  // Отношения
  owner     User      @relation("UserPages", fields: [ownerId], references: [id], onDelete: Cascade)
  parent    Page?     @relation("PageHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children  Page[]    @relation("PageHierarchy")
  sharedWith SharedPage[] @relation("SharedPagePage")

  @@index([ownerId])
  @@index([parentId])
}

// Модель для совместного доступа к страницам
model SharedPage {
  id        String   @id @default(uuid())
  pageId    String
  userId    String
  permission String   // "read", "edit", "comment"
  createdAt DateTime @default(now())
  
  // Отношения
  page      Page     @relation("SharedPagePage", fields: [pageId], references: [id], onDelete: Cascade)
  user      User     @relation("SharedPageUsers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pageId, userId])
  @@index([pageId])
  @@index([userId])
}

// Модель базы данных
model Database {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  
  // Отношения
  owner       User     @relation("UserDatabases", fields: [ownerId], references: [id], onDelete: Cascade)
  tables      Table[]
  sharedWith  SharedDatabase[] @relation("SharedDatabaseDatabase")

  @@index([ownerId])
}

// Модель для совместного доступа к базам данных
model SharedDatabase {
  id         String   @id @default(uuid())
  databaseId String
  userId     String
  permission String   // "read", "edit", "admin"
  createdAt  DateTime @default(now())
  
  // Отношения
  database   Database @relation("SharedDatabaseDatabase", fields: [databaseId], references: [id], onDelete: Cascade)
  user       User     @relation("SharedDatabaseUsers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([databaseId, userId])
  @@index([databaseId])
  @@index([userId])
}

// Модель таблицы в базе данных
model Table {
  id         String   @id @default(uuid())
  name       String
  databaseId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Отношения
  database   Database @relation(fields: [databaseId], references: [id], onDelete: Cascade)
  columns    Column[]
  rows       Row[]

  @@index([databaseId])
}

// Модель колонки таблицы
model Column {
  id          String   @id @default(uuid())
  name        String
  type        String   // "text", "number", "date", "boolean", "select", "relation", etc.
  options     Json?    // Для типов с опциями, например, "select"
  isRequired  Boolean  @default(false)
  tableId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Отношения
  table       Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells       Cell[]

  @@index([tableId])
}

// Модель строки таблицы
model Row {
  id        String   @id @default(uuid())
  tableId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Отношения
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells     Cell[]

  @@index([tableId])
}

// Модель ячейки таблицы
model Cell {
  id        String   @id @default(uuid())
  value     Json?    // Значение ячейки в JSON формате
  rowId     String
  columnId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Отношения
  row       Row      @relation(fields: [rowId], references: [id], onDelete: Cascade)
  column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)

  @@unique([rowId, columnId])
  @@index([rowId])
  @@index([columnId])
}

// Модель для аналитических дашбордов
model Dashboard {
  id          String   @id @default(uuid())
  name        String
  description String?
  layout      Json?    // Расположение виджетов в JSON формате
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String
  
  // Отношения
  widgets     Widget[]

  @@index([ownerId])
}

// Модель виджета на дашборде
model Widget {
  id          String   @id @default(uuid())
  name        String
  type        String   // "chart", "table", "metric", "text", etc.
  config      Json     // Конфигурация виджета в JSON формате
  dashboardId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Отношения
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@index([dashboardId])
} 